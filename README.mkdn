# NAME

Furl - Lightning-fast URL fetcher

# SYNOPSIS

    use Furl;

    my $furl = Furl->new(agent => ...);
    my ($code, $msg, $headers, $body) = $furl->request(
        method => 'GET',
        host   => 'example.com',
        port   => 80,
        path   => '/'
    );
    # or
    my ($code, $msg, $headers, $body) = $furl->request(
        method => 'GET',
        host   => 'example.com',
        port   => 80,
        path   => '/'
        save_to_tmpfile => 1,
    );

# DESCRIPTION

Furl is yet another http client library.

# INTERFACE

## Class Methods

### C<< Furl->new(%args | \%args) :Furl >>

_%args_ might be:

- agent :Str = "Furl/$VERSION"

- timeout :Int = 10

- max_redirects :Int = 7

## Instance Methods

### C<< $furl->request(%args) :($code, $msg, \@headers, $body) >>

_%args_ might be:

- scheme :Str

- host :Str

- port :Int

- path_query :Str

- url :Str

- headers :ArrayRef

### C<< $furl->get($url :Str) :($code, $msg, \@headers, $body) >>

Equivalent to `$furl->request(url => $url)`.

# INTEGRATE WITH HTTP::Response

Some useful libraries require the instance of HTTP::Response for argument.
You can easy to create the instance of it.

    my $res = HTTP::Response->new($furl->get($url));

# PROJECT POLICY

    - Pure Perl implementation is required
      (I want to use Furl without compilers)
    - few dependencies are allowed.
    - faster than WWW::Curl::Easy

# TODO

    - form serializer
        seraizlie_x_www_url_encoded(foo => bar, baz => 1);
    - idn support(with Net-IDN-Encode?)
    - cookie_jar support
    - ssl support
    - test case for proxy support
    - AnyEvent::Furl?

# AUTHOR

Tokuhiro Matsuno <tokuhirom AAJKLFJEF GMAIL COM>

# SEE ALSO

# LICENSE

Copyright (C) Tokuhiro Matsuno

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.