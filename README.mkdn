# NAME

Furl - Lightning-fast URL fetcher

# SYNOPSIS

    use Furl;

    my $furl = Furl->new(agent => ...);
    my ($code, $msg, $headers, $body) = $furl->request(
        method => 'GET',
        host   => 'example.com',
        port   => 80,
        path   => '/'
    );
    # or
    my ($code, $msg, $headers, $body) = $furl->request(
        method => 'GET',
        host   => 'example.com',
        port   => 80,
        path   => '/'
        save_to_tmpfile => 1,
    );

# DESCRIPTION

Furl is yet another http client library.

# INTERFACE

## Class Methods

### C<< Furl->new(%args | \%args) :Furl >>

_%args_ might be:

- agent :Str = "Furl/$VERSION"

- timeout :Int = 10

- max_redirects :Int = 7

## Instance Methods

### C<< $furl->request(%args) :($code, $msg, \@headers, $body) >>

_%args_ might be:

- scheme :Str = "http"

- host :Str

- port :Int = 80

- path_query :Str = "/"

- url :Str

- headers :ArrayRef

### C<< $furl->get($url :Str) :($code, $msg, \@headers, $body) >>

Equivalent to `$furl->request(url => $url)`.

# INTEGRATE WITH HTTP::Response

Some useful libraries require HTTP::Response instances for their arguments.
You can easily create its instance from the result of `request()` and `get()`.

    my $res = HTTP::Response->new($furl->get($url));

# PROJECT POLICY

    - Pure Perl implementation is required
      (I want to use Furl without compilers)
    - few dependencies are allowed.
    - faster than WWW::Curl::Easy

- Why IO::Socket::SSL?

Net::SSL is not well documented.

- Why env_proxy is optional?

Environment variables are highly dependent on users' environments.
It makes confusing users.

- Supported Operating Systems.

Linux 2.6 or higher, OSX Tiger or higher, Windows XP or higher.

And we can support other operating systems if you send a patch.

# TODO

    - form serializer
        make_form(foo => bar, baz => 1);
    - cookie_jar support(really need??)
    - request body should allow $fh
    - request body should allow \&code.
    - response body should allow $fh
      - $f->request(write_data => $fh)
    - request with HTTP::Request
      - e.g. $f->request_by_http_request($req)
    - AnyEvent::Furl?

# AUTHOR

Tokuhiro Matsuno <tokuhirom AAJKLFJEF GMAIL COM>

# SEE ALSO

[LWP](http://search.cpan.org/perldoc?LWP)

# LICENSE

Copyright (C) Tokuhiro Matsuno

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.